.. title: Migrating blog to nikola + GAE
.. slug: migrating-blog-to-nikola-+-gae
.. date: 2017-12-28 19:14:23 UTC+01:00
.. tags: en, computer
.. category: 
.. link: 
.. description: 
.. type: text


.. class:: ad
  
   This blog has been in deep lethargy for several years. I'm not sure I can
   make it come back to life, but I'll try, first of all by explaining how I
   managed to migrate it from *blogger* to static site hosting generated by
   `nikola <https://getnikola.com>`__ and hosted on GAE (Google app engine).

.. TEASER_END

Import in Nikola
==================

*Nikola* proposes the plugin :code:`import_blogger` which allows you to
import an XML export file of *blogger* into the *nikola* file structure.  
You may install it with:

.. code-block:: shell

   nikola plugin -i import_blogger

A *nikola* project is then created with the command:

.. code-block:: shell

   nikola import_blogger -o name_of_blog blogger_export. xml

Then copy the generated configuration file (e.g. :code:`conf. py. import_blogger-20171228_142937`) to the file :code:`conf. py` and modify the configuration according to your wishes.

Blog article files are generated in *html* format with a *. meta* file in
*restructuredtext* format containing the article's metadata.

Overall the conversion goes well and the rendering is acceptable. However,
some articles require some tweaking. I get them through the tools:
:code:`pandoc` and :code:`html2text2` to get a version of the article in
*restructuredtext* format to be taken up and modified by hand:

.. code-block:: shell

   html2text2 article. html | pandoc -f markdown -t rst > article. rst
   mv article. html article. html article. bak


Hosting on GAE
===================

Google provides pretty detailed explanations for `hosting a static blog on GAE <https://cloud.google.com/appengine/docs/standard/python/getting-started/hosting-a-static-website>`__.  
Applied to a static blog generated by *Nikola*, you need to:

1. Create a project on the `console google cloud <https://console.cloud.google.com/project>`__.
2. Put the file :code:`app. yaml` in the following directory :code:`files`
   at the root of the project:

   .. code:: yaml

      runtime: python27
      api_version: 1
      threadsafe: true

      handlers:
      - url: /
        static_files: index.html
        upload: index.html

      - url: /en/
        static_files: en/index.html
        upload: en/index.html

      - url: /(.*)
        static_files: \1
        upload: (.*)

3. Change the parameter :code:`DEPLOY_COMMANDS` in the file :code:`conf. py`
   as follows (replacing :code:`gae_project_id` with the identifier of the
   project created in 1.:

   .. code:: python

     STRIP_INDEXES = False
     PRETTY_URLS = False
     DEPLOY_COMMANDS = {
         'default': [
             "cd output && gcloud app deploy --project gae_project_id"
         ]
     }

It is probably possible to use :code:`PRETTY_URLS` by modifying the file
:code:`app. yaml` to take by default the files `index. html`, but this
configuration allows to keep the same URLs as on *blogger* if you configure
the redirection for the old URLs:

.. code:: python
 
   REDIRECTIONS = [
       ('2012/04/lettre-eva-joly.html', '/posts/2012/04/lettre-eva-joly.html'),
       ]

Or even more simply, as @GetNikola very kindly pointed out to me on twitter, by replacing :code:`posts` with :code:`""` in the  variable :code:`POSTS`:


.. code:: python

   POSTS = (
               ("posts/*.txt", "", "post.tmpl"),
               ("posts/*.rst", "", "post.tmpl"),
               ("posts/*.html", "", "post.tmpl"),
               )

Then a simple :code:`nikola build && nikola deploy` will make the site
accessible on the URL https://gae_project_id. appspot. com. You are free to
configure your DNS registration so that your domain name redirects to this
page. You can also configure the automatic generation and renewal of
certificates to make your site accessible in *HTTPS*. This is easily done on
the *google cloud* console.




